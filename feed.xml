<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="https://jesseschauer.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://jesseschauer.com/" rel="alternate" type="text/html" /><updated>2025-07-01T00:00:53+00:00</updated><id>https://jesseschauer.com/feed.xml</id><title type="html">Jesse Schauer</title><subtitle>One-man dev shop. The merc they call in to get stuff done. I build trust, not just code.</subtitle><entry><title type="html">Lessons from the Trench: Migrating a Legacy System from MySQL 5 to MariaDB</title><link href="https://jesseschauer.com/2025/06/30/mysql-mariadb-migration.html" rel="alternate" type="text/html" title="Lessons from the Trench: Migrating a Legacy System from MySQL 5 to MariaDB" /><published>2025-06-30T00:00:00+00:00</published><updated>2025-06-30T00:00:00+00:00</updated><id>https://jesseschauer.com/2025/06/30/mysql-mariadb-migration</id><content type="html" xml:base="https://jesseschauer.com/2025/06/30/mysql-mariadb-migration.html"><![CDATA[<blockquote>
  <p>“It’s just a drop-in replacement.” — Famous last words</p>
</blockquote>

<h2 id="overview">Overview</h2>

<p>When you’re working with a legacy application built on MySQL 5.x and planning a migration to MariaDB, it can be tempting to treat the task as a simple dependency upgrade. After all, MariaDB positions itself as a drop-in replacement. But in reality, it’s anything but simple when you factor in decade-old codebases, fragile integrations, and unspoken institutional knowledge.</p>

<p>In this post, I want to share a few key lessons from a recent migration I supported on a Spring WebMVC application that had been running against MySQL 5 for years. The transition to modern MariaDB involved much more than swapping connection strings—and these lessons might save your team from a painful surprise.</p>

<hr />

<h2 id="lesson-1-end-to-end-testing-is-non-negotiable">Lesson 1: End-to-End Testing is Non-Negotiable</h2>

<p>About six months before go-live, we ran an initial dry-run migration. It failed.</p>

<p>The culprit? Timestamp formatting. A subtle change in millisecond precision between MySQL and MariaDB caused parts of the application to break unexpectedly.</p>

<p>Up until that point, the migration had been considered a low-risk, drop-in upgrade by several stakeholders until this failure surfaced. Once the issues became visible, I had to escalate through my manager to get the right people involved and realign expectations.</p>

<p>This experience became the forcing function to implement a full suite of end-to-end tests covering critical workflows. Without that early red flag, the actual cutover could have led to cascading failures in production.</p>

<p><strong>Takeaway:</strong> No matter how confident you are in your schema and code, run full end-to-end testing early and often. Assume that what looks compatible may still behave differently in production.</p>

<hr />

<h2 id="lesson-2-appoint-a-one-man-dev-shop">Lesson 2: Appoint a “One-Man Dev Shop”</h2>

<p>Legacy systems often span layers of business logic, infrastructure quirks, and tacit team knowledge. During this migration, I found myself acting as a translator across all of it—jumping from SQL anomalies to ORM behavior to release planning.</p>

<p>Having someone who understands the application holistically (not just the database or the UI) is invaluable. This role becomes the glue that catches what would otherwise slip through the cracks.</p>

<p><strong>That said, this kind of cross-functional role is often filled informally—frequently by someone scoped as “just a Java developer.”</strong>
When migrations like this succeed, it’s often because someone quietly picks up the architectural slack. But ideally, that kind of broad ownership should be recognized, supported, and intentionally staffed—not left to chance or convenience.</p>

<p><strong>Takeaway:</strong> Assign at least one deep generalist to the team—someone who can hold the full context and anticipate impact across boundaries.</p>

<hr />

<h2 id="lesson-3-compatibility-is-not-identity">Lesson 3: Compatibility is Not Identity</h2>

<p>Yes, MariaDB is designed to be compatible with MySQL. But over the years, the projects have diverged. We encountered subtle differences in collation behavior, error handling, and index optimizations.</p>

<p>These weren’t necessarily bugs—just implementation details that had never been tested under MariaDB until now.</p>

<p><strong>Takeaway:</strong> Treat “compatible” systems with the same skepticism you’d give any new vendor. Validate every assumption.</p>

<hr />

<h2 id="lesson-4-legacy-code-has-gravity">Lesson 4: Legacy Code Has Gravity</h2>

<p>The application we migrated had been stable for years—but that stability was built on brittle foundations. Stored procedures, raw JDBC, ancient configuration formats… none of it was written for modern MariaDB.</p>

<p>Even minor changes in defaults or behavior had ripple effects, especially when layered with assumptions baked into business logic.</p>

<p><strong>Takeaway:</strong> Modernizing the database will expose forgotten dependencies. Budget time for triage and legacy archaeology.</p>

<hr />

<h2 id="bonus-the-batch-server-surprise">Bonus: The “Batch Server” Surprise</h2>

<p>During our prep work, we uncovered a cluster of legacy VB applications and Microsoft Access databases running quietly on a Windows VM accessed via RDP and known simply as “the batch server.” It was neither actively maintained nor monitored—and yet, several important business processes still depended on it.</p>

<p>Getting someone with the authorization and knowledge to even <em>touch</em> those apps became its own mini-project. It’s a reminder that legacy isn’t always what’s in Git—it’s what’s still running silently in the corner, waiting to break.</p>

<p><strong>Takeaway:</strong> Inventory everything early. If it talks to your database, it’s part of the migration—whether you knew it or not.</p>

<hr />

<h2 id="bonus-the-utf-8-copypaste-quirk">Bonus: The UTF-8 Copy/Paste Quirk</h2>

<p>Another surprise surfaced when users started pasting content from emails into form fields. Despite both systems claiming UTF-8 support, subtle encoding inconsistencies began breaking validation and downstream processes—especially when special characters or smart quotes snuck in.</p>

<p>These issues are notoriously hard to trace and even harder to reproduce consistently. In legacy environments, text encoding is one of the quietest but most persistent saboteurs.</p>

<p><strong>Takeaway:</strong> Don’t assume UTF-8 means the same thing across all input sources. Sanitize aggressively and test with real-world data—especially copy/paste content from email clients.</p>

<hr />

<h2 id="bonus-the-data-too-long-mystery">Bonus: The “Data Too Long” Mystery</h2>

<p>After go-live, we encountered a failure where an external vendor’s application began receiving “Data too long” errors when submitting payloads via API. The kicker? This hadn’t happened before.</p>

<p>Turns out, the old MySQL JDBC driver silently truncated values to fit the database column definitions—no errors, no warnings. When we switched to MariaDB, this behavior stopped, and the system began failing as it should have all along. The fix required coordinating with the vendor to validate and trim their input on their side.</p>

<p>Tracking this down was especially challenging since no error was previously logged, and the only clues were buried in raw server logs.</p>

<p><strong>Takeaway:</strong> Migrations will surface bad behavior that legacy systems had quietly tolerated. Expect some cleanup that feels more like archaeology than engineering.</p>

<hr />

<h2 id="bonus-timing-and-coverage-matter">Bonus: Timing and Coverage Matter</h2>

<p>Even the most well-planned migration can falter if the timing is off. Attempting a major cutover near holidays or during peak vacation seasons introduces unnecessary risk—key people may be unavailable when you need them most. We ran into exactly that.</p>

<p>Additionally, make sure every major module or subsystem has at least one subject matter expert (SME) on call—and a backup SME identified. Knowledge gaps become exponentially more painful under time pressure.</p>

<p><strong>Takeaway:</strong> Avoid migrations during periods when coverage is limited, and ensure there’s redundancy in key personnel. Even temporary knowledge gaps can stall critical progress.</p>

<hr />

<h2 id="final-thoughts">Final Thoughts</h2>

<p>Before wrapping up, I want to make one thing clear: I wasn’t a hero on this migration—I was just one of the cogs in the machine, trying to keep things moving and going a bit above and beyond when needed. Many of the wins came from collaboration, timing, and a willingness to poke at things others had written off as stable.</p>

<p>Database migrations in legacy systems are never just technical. They are organizational, historical, and often political. By catching timestamp issues early, pushing for full E2E validation, and acting as a bridge between disconnected silos, we turned what could have been a painful failure into a mostly smooth transition.</p>

<p>If you’re about to take on a migration like this, here’s the simplest advice I can offer:</p>

<ul>
  <li>Test like it matters (because it does)</li>
  <li>Staff like it matters (because it really does)</li>
  <li>And respect the gravity of legacy systems</li>
</ul>

<p>Because once the data starts flowing, there’s no hitting Undo.</p>

<hr />

<p><em>Want to swap stories or ask questions about your own legacy migration? Feel free to connect with me on <a href="https://linkedin.com/in/jesse-schauer">LinkedIn</a></em></p>]]></content><author><name>Jesse Schauer</name></author><category term="legacy systems" /><category term="database migration" /><category term="MariaDB" /><category term="MySQL" /><category term="technical debt" /><category term="government IT" /><category term="case study" /><summary type="html"><![CDATA[What looked like a simple database upgrade turned into a deep dive through legacy code, hidden integrations, and encoding nightmares.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://jesseschauer.com/assets/images/jesse-schauer-headshot.png" /><media:content medium="image" url="https://jesseschauer.com/assets/images/jesse-schauer-headshot.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">How I Saved $50K+ on a Government Change Request by Asking One Question</title><link href="https://jesseschauer.com/2025/06/24/50k-savings-single-change-request.html" rel="alternate" type="text/html" title="How I Saved $50K+ on a Government Change Request by Asking One Question" /><published>2025-06-24T00:00:00+00:00</published><updated>2025-06-24T00:00:00+00:00</updated><id>https://jesseschauer.com/2025/06/24/50k-savings-single-change-request</id><content type="html" xml:base="https://jesseschauer.com/2025/06/24/50k-savings-single-change-request.html"><![CDATA[<!-- TEMP: force Open Graph image -->
<meta property="og:image" content="https://www.jesseschauer.com/assets/images/50k_change_preview.png" />

<p>In 2020, I sat in a design review meeting for a proposed new module in <strong>SPACES</strong> — North Dakota’s public benefits management system.</p>

<p>If you’ve worked in government IT with benefits management, you probably know SPACES — or at least a variation of it. The name itself is a North Dakota-specific acronym coined during the benefits modernization effort. Under the hood, it’s a heavily customized case management system originally developed by a major consulting firm nearly 20 years ago and later adapted and implemented under different names in other states. It’s often jokingly referred to as:</p>

<blockquote>
  <p><em>“The 20-year-old system that replaces 40-year-old systems.”</em></p>
</blockquote>

<p>With that kind of legacy comes layers of process, paperwork, and tightly coupled architecture. Which is why the proposed change request on the table was so familiar — and so expensive.</p>

<hr />

<h2 id="the-original-plan-full-module-buildout">The Original Plan: Full Module Buildout</h2>

<p>The ask seemed simple: a handful of users at the Department of Health and Human Services (DHHS) needed to <strong>securely view and export a specific subset of data</strong>.</p>

<p>The solution presented?</p>

<ul>
  <li>A new <strong>module</strong> with multiple screens</li>
  <li>Custom <strong>security groups</strong> and role-based access control</li>
  <li>Built-in <strong>reporting and export functionality</strong></li>
  <li>Full design, development, testing, and documentation cycles</li>
</ul>

<p>On paper, it made sense. But the real cost was already snowballing. Between development, multiple rounds of SIT/UAT testing, and security provisioning across environments, this was shaping up to be <strong>a 400+ hour effort</strong> — easily <strong>$50,000 to $70,000</strong> in initial vendor and internal costs.</p>

<hr />

<h2 id="the-turning-point-just-listen">The Turning Point: Just Listen</h2>

<p>I was brought in to review the proposed design and provide the technical approach and estimates. While the team walked through their documents, a casual comment from the stakeholders stopped me in my tracks:</p>

<blockquote>
  <p><em>“We currently just run queries in our viewer tool and export the data to Excel.”</em></p>
</blockquote>

<p>So I asked a simple question:<br />
<strong>“Why don’t we just continue doing that — but with a secured, predefined view in the SPACES database?”</strong></p>

<p>You could hear the pause.</p>

<p>Not because it was a wild idea — but because no one had considered it.</p>

<hr />

<h2 id="the-lazy-solution-that-worked">The Lazy Solution That Worked</h2>

<p>I’m not being modest when I say: I’m lazy.<br />
<strong>The good kind of lazy — the kind that looks for outcomes, not process for process’ sake.</strong></p>

<p>Instead of writing a single line of Java, I:</p>

<ul>
  <li>Created a <strong>predefined SQL view</strong> scoped to the exact data they needed</li>
  <li>Configured <strong>read-only access</strong> for authorized users</li>
  <li>Documented how to connect to the database securely using their existing tools</li>
</ul>

<p>That’s it.<br />
<strong>No new modules. No new screens. No added maintenance.</strong></p>

<p>The users got exactly what they needed. It took only a couple of hours of actual work — plus the usual herding of cats to get access and approvals.</p>

<hr />

<h2 id="the-real-savings-time-cost-complexity">The Real Savings: Time, Cost, Complexity</h2>

<p>By choosing a lean solution that fit the real use case, we avoided:</p>

<ul>
  <li>Hundreds of hours in <strong>design, development, and testing</strong></li>
  <li>Time-consuming <strong>security role design and approvals</strong></li>
  <li>Dozens of pages of <strong>documentation and test script authoring</strong></li>
  <li>Ongoing <strong>maintenance debt</strong></li>
</ul>

<p>The result?<br />
A working, secure solution delivered in <strong>1/400th</strong> of the estimated time.<br />
At standard government contracting rates, that’s <strong>$50,000+ in cost avoidance</strong> — for a feature that was already being done manually.</p>

<hr />

<h2 id="lessons-for-public-sector-tech">Lessons for Public Sector Tech</h2>

<p>This story isn’t about being clever. It’s about asking the right question at the right time — and having enough technical context to offer a better path.</p>

<blockquote>
  <p>Legacy modernization doesn’t always mean “rewrite it.”<br />
Sometimes it means <strong>don’t write it at all</strong>.</p>
</blockquote>

<p>When we stop treating every request as a dev project, and instead look at the system as a whole, we uncover opportunities for massive savings — in time, money, and stress.</p>

<p>I’ll always advocate for code when it’s needed.<br />
But I’ll also keep speaking up when it’s not.</p>

<hr />

<h2 id="wrapping-up">Wrapping Up</h2>

<p>This isn’t the only time I’ve helped state agencies and enterprise teams save tens of thousands — even hundreds of thousands — by questioning the default build-it instinct or status quo. But it’s one of my favorite examples because the fix was so simple — and the ripple effects so big.</p>

<p><strong>One question. One database view. $50K+ saved.</strong><br />
Sometimes that’s all it takes.</p>

<hr />

<p><em>Want more behind-the-scenes insights on government IT, pragmatic legacy modernization, and automation that actually works?</em><br />
👉 Visit <a href="https://www.jesseschauer.com">JesseSchauer.com</a> or connect with me on <a href="https://linkedin.com/in/jesse-schauer">LinkedIn</a>.</p>]]></content><author><name>Jesse Schauer</name></author><category term="government IT" /><category term="legacy systems" /><category term="cost savings" /><category term="SPACES" /><category term="public sector tech" /><category term="database views" /><category term="case study" /><summary type="html"><![CDATA[A simple, pragmatic solution that avoided 400+ hours of work and saved $50,000.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://jesseschauer.com/assets/images/50k_change_preview.png" /><media:content medium="image" url="https://jesseschauer.com/assets/images/50k_change_preview.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">How I Filtered 1,000+ Job Alert Emails with Python and AI</title><link href="https://jesseschauer.com/automation/ai/job-search/2025/06/04/job-filtering.html" rel="alternate" type="text/html" title="How I Filtered 1,000+ Job Alert Emails with Python and AI" /><published>2025-06-04T00:00:00+00:00</published><updated>2025-06-04T00:00:00+00:00</updated><id>https://jesseschauer.com/automation/ai/job-search/2025/06/04/job-filtering</id><content type="html" xml:base="https://jesseschauer.com/automation/ai/job-search/2025/06/04/job-filtering.html"><![CDATA[<p>Job hunting gets noisy fast. I built a Python script using the Microsoft Graph API and some local LLM logic to classify and sort all my job alert emails from several job boards into folders — tagging them as review, ignore, or priority.</p>]]></content><author><name></name></author><category term="automation" /><category term="ai" /><category term="job-search" /><summary type="html"><![CDATA[Job hunting gets noisy fast. I built a Python script using the Microsoft Graph API and some local LLM logic to classify and sort all my job alert emails from several job boards into folders — tagging them as review, ignore, or priority.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://jesseschauer.com/assets/images/jesse-schauer-headshot.png" /><media:content medium="image" url="https://jesseschauer.com/assets/images/jesse-schauer-headshot.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>